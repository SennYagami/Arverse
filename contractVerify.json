{
    "language": "Solidity",
    "sources": {
        "contracts/AssetContract.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./ERC1155Tradable.sol\";\n\n/**\n * @title AssetContract\n * AssetContract - A contract for easily creating non-fungible assets on OpenSea.\n */\ncontract AssetContract is ERC1155Tradable {\n    event PermanentURI(string _value, uint256 indexed _id);\n\n    uint256 constant TOKEN_SUPPLY_CAP = 1;\n\n    string public templateURI;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURI;\n\n    // Mapping for whether a token URI is set permanently\n    mapping(uint256 => bool) private _isPermanentURI;\n\n    error InsufficientBalance();\n\n    modifier onlyTokenAmountOwned(\n        address _from,\n        uint256 _id,\n        uint256 _quantity\n    ) {\n        require(\n            _ownsTokenAmount(_from, _id, _quantity),\n            \"AssetContract#onlyTokenAmountOwned: ONLY_TOKEN_AMOUNT_OWNED_ALLOWED\"\n        );\n        _;\n    }\n\n    modifier onlyCreatorLazyMint(\n        address from,\n        uint256 tokenId,\n        uint256 amount\n    ) {\n        // get balance of spender - this will return current balance\n        // plus remaining supply if spender is the creator\n        // (or this contract itself - which should never be possible,\n        // as Seaport will only spend from accts that have signed a valid order)\n\n        // sea store front token\n        uint256 fromBalance = balanceOf(from, tokenId);\n\n        // if insufficient balance, revert\n        if (fromBalance < amount) {\n            revert InsufficientBalance();\n        }\n        _;\n    }\n\n    /**\n     * @dev Require the URI to be impermanent\n     */\n    modifier onlyImpermanentURI(uint256 id) {\n        require(\n            !isPermanentURI(id),\n            \"AssetContract#onlyImpermanentURI: URI_CANNOT_BE_CHANGED\"\n        );\n        _;\n    }\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _proxyRegistryAddress,\n        string memory _templateURI\n    ) ERC1155Tradable(_name, _symbol, _proxyRegistryAddress) {\n        if (bytes(_templateURI).length > 0) {\n            setTemplateURI(_templateURI);\n        }\n    }\n\n    function openSeaVersion() public pure returns (string memory) {\n        return \"2.1.0\";\n    }\n\n    /**\n     * @dev Require _from to own a specified quantity of the token\n     */\n    function _ownsTokenAmount(\n        address _from,\n        uint256 _id,\n        uint256 _quantity\n    ) internal view returns (bool) {\n        return balanceOf(_from, _id) >= _quantity;\n    }\n\n    /**\n     * Compat for factory interfaces on OpenSea\n     * Indicates that this contract can return balances for\n     * tokens that haven't been minted yet\n     */\n    function supportsFactoryInterface() public pure returns (bool) {\n        return true;\n    }\n\n    function setTemplateURI(string memory _uri) public onlyOwnerOrProxy {\n        templateURI = _uri;\n    }\n\n    function setURI(uint256 _id, string memory _uri)\n        public\n        virtual\n        onlyOwnerOrProxy\n        onlyImpermanentURI(_id)\n    {\n        _setURI(_id, _uri);\n    }\n\n    function setPermanentURI(uint256 _id, string memory _uri)\n        public\n        virtual\n        onlyOwnerOrProxy\n        onlyImpermanentURI(_id)\n    {\n        _setPermanentURI(_id, _uri);\n    }\n\n    function isPermanentURI(uint256 _id) public view returns (bool) {\n        return _isPermanentURI[_id];\n    }\n\n    function uri(uint256 _id) public view override returns (string memory) {\n        string memory tokenUri = _tokenURI[_id];\n        if (bytes(tokenUri).length != 0) {\n            return tokenUri;\n        }\n        return templateURI;\n    }\n\n    function balanceOf(address _owner, uint256 _id)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        uint256 balance = super.balanceOf(_owner, _id);\n        return\n            _isCreatorOrProxy(_id, _owner)\n                ? balance + _remainingSupply(_id)\n                : balance;\n    }\n\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _id,\n        uint256 _amount,\n        bytes memory _data\n    ) public override onlyCreatorLazyMint(_from, _id, _amount) {\n        uint256 mintedBalance = super.balanceOf(_from, _id);\n        if (mintedBalance < _amount) {\n            // Only mint what _from doesn't already have\n            mint(_to, _id, _amount - mintedBalance, _data);\n            if (mintedBalance > 0) {\n                super.safeTransferFrom(_from, _to, _id, mintedBalance, _data);\n            }\n        } else {\n            super.safeTransferFrom(_from, _to, _id, _amount, _data);\n        }\n    }\n\n    function safeBatchTransferFrom(\n        address _from,\n        address _to,\n        uint256[] memory _ids,\n        uint256[] memory _amounts,\n        bytes memory _data\n    ) public override {\n        require(\n            _ids.length == _amounts.length,\n            \"AssetContract#safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\"\n        );\n\n        bytes[] memory _dataLs = abi.decode(_data, (bytes[]));\n        for (uint256 i = 0; i < _ids.length; i++) {\n            safeTransferFrom(_from, _to, _ids[i], _amounts[i], _dataLs[i]);\n        }\n    }\n\n    function _beforeMint(uint256 _id, uint256 _quantity)\n        internal\n        view\n        override\n    {\n        require(\n            _quantity <= _remainingSupply(_id),\n            \"AssetContract#_beforeMint: QUANTITY_EXCEEDS_TOKEN_SUPPLY_CAP\"\n        );\n    }\n\n    // Overrides ERC1155Tradable burn to check for quantity owned\n    function burn(\n        address _from,\n        uint256 _id,\n        uint256 _quantity\n    ) public override onlyTokenAmountOwned(_from, _id, _quantity) {\n        super.burn(_from, _id, _quantity);\n    }\n\n    // Overrides ERC1155Tradable batchBurn to check for quantity owned\n    function batchBurn(\n        address _from,\n        uint256[] memory _ids,\n        uint256[] memory _quantities\n    ) public override {\n        for (uint256 i = 0; i < _ids.length; i++) {\n            require(\n                _ownsTokenAmount(_from, _ids[i], _quantities[i]),\n                \"AssetContract#batchBurn: ONLY_TOKEN_AMOUNT_OWNED_ALLOWED\"\n            );\n        }\n        super.batchBurn(_from, _ids, _quantities);\n    }\n\n    function _mint(\n        address _to,\n        uint256 _mainCollectionId,\n        uint256 _subCollectionId,\n        uint256 _tokenId,\n        uint256 _quantity,\n        bytes memory _data\n    ) internal override {\n        super._mint(\n            _to,\n            _mainCollectionId,\n            _subCollectionId,\n            _tokenId,\n            _quantity,\n            _data\n        );\n\n        if (_data.length > 1) {\n            setURI(_tokenId, string(_data));\n        }\n    }\n\n    function _isCreatorOrProxy(uint256, address _address)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        return _isOwnerOrProxy(_address);\n    }\n\n    function _remainingSupply(uint256 _id)\n        internal\n        view\n        virtual\n        returns (uint256)\n    {\n        return TOKEN_SUPPLY_CAP - totalSupply(_id);\n    }\n\n    // Override ERC1155Tradable for birth events\n    function _origin(\n        uint256 /* _id */\n    ) internal view virtual override returns (address) {\n        return owner();\n    }\n\n    function _batchMint(\n        address _to,\n        uint256[] memory _mainCollectionIdLs,\n        uint256[] memory _subCollectionIdLs,\n        uint256[] memory _tokenIds,\n        uint256[] memory _quantities,\n        bytes[] memory _dataLs\n    ) internal virtual override {\n        super._batchMint(\n            _to,\n            _mainCollectionIdLs,\n            _subCollectionIdLs,\n            _tokenIds,\n            _quantities,\n            _dataLs\n        );\n\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            bytes memory _data = _dataLs[i];\n            if (_data.length > 1) {\n                setURI(_tokenIds[i], string(_data));\n            }\n        }\n    }\n\n    function _setURI(uint256 _id, string memory _uri) internal {\n        _tokenURI[_id] = _uri;\n        emit URI(_uri, _id);\n    }\n\n    function _setPermanentURI(uint256 _id, string memory _uri)\n        internal\n        virtual\n    {\n        require(\n            bytes(_uri).length > 0,\n            \"AssetContract#setPermanentURI: ONLY_VALID_URI\"\n        );\n        _isPermanentURI[_id] = true;\n        _setURI(_id, _uri);\n        emit PermanentURI(_uri, _id);\n    }\n}\n"
        },
        "contracts/ERC1155Tradable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\nimport \"./common/meta-transactions/ContentMixin.sol\";\nimport \"./common/meta-transactions/NativeMetaTransaction.sol\";\n\ncontract OwnableDelegateProxy {}\n\ncontract ProxyRegistry {\n    mapping(address => OwnableDelegateProxy) public proxies;\n}\n\n/**\n * @title ERC1155Tradable\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, has create and mint functionality, and supports useful standards from OpenZeppelin,\n  like exists(), name(), symbol(), and totalSupply()\n */\ncontract ERC1155Tradable is\n    ContextMixin,\n    ERC1155,\n    NativeMetaTransaction,\n    Ownable,\n    Pausable\n{\n    using Address for address;\n\n    // Proxy registry address\n    address public proxyRegistryAddress;\n    // Contract name\n    string public name;\n    // Contract symbol\n    string public symbol;\n\n    /*\n        DESIGN NOTES:\n        mapping from mainCollectionId => subCollectionId => tokenId => ownerAddress => balance\n\n        mainCollectionId subCollectionId are a concatenation of:\n        * creator: hex address of the creator of the token. 160 bits\n        * index: 96 bits\n        \n        mainCollectionId are a concatenation of:\n        * creator: hex address of the creator of the token. 160 bits\n        * index. 96 bits.\n\n        subCollectionId are a concatenation of:\n        * creator: hex address of the creator of the token. 160 bits\n        * index of work type. 0:series work, like manga or novel; 1:other token. 1 bit.\n        * index. 95 bits.\n    \n        tokenId is a concatenation of:\n        * creator: hex address of the creator of the token. 160 bits\n        * mainCollection index: 10 bits\n        * subCollection index: 10 bits\n        * if its subCollection work type is 0, then:\n            * index of episode: 18 bits\n            * index of page: 18 bits.\n        * else \n            * index of category: 36 bits\n        * supply: Supply cap for this token, up to 2^40 - 1 (1 trillion).  40 bits\n    */\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => mapping(address => uint256))))\n        private balances;\n\n    mapping(uint256 => uint256) private _supply;\n\n    // mainCollection => ether value\n    mapping(uint256 => uint256) private _value;\n\n    // tokenId to [mainCollectionId,subCollectionId]\n    mapping(uint256 => uint256[2]) private _idPath;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _proxyRegistryAddress\n    ) ERC1155(\"\") {\n        name = _name;\n        symbol = _symbol;\n        proxyRegistryAddress = _proxyRegistryAddress;\n        _initializeEIP712(name);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner or their proxy\n     */\n    modifier onlyOwnerOrProxy() {\n        require(\n            _isOwnerOrProxy(_msgSender()),\n            \"ERC1155Tradable#onlyOwner: CALLER_IS_NOT_OWNER\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than _from or their proxy\n     */\n    modifier onlyApproved(address _from) {\n        require(\n            _from == _msgSender() || isApprovedForAll(_from, _msgSender()),\n            \"ERC1155Tradable#onlyApproved: CALLER_NOT_ALLOWED\"\n        );\n        _;\n    }\n\n    function _isOwnerOrProxy(address _address) internal view returns (bool) {\n        return owner() == _address || _isProxyForUser(owner(), _address);\n    }\n\n    function pause() external onlyOwnerOrProxy {\n        _pause();\n    }\n\n    function unpause() external onlyOwnerOrProxy {\n        _unpause();\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        require(\n            account != address(0),\n            \"ERC1155: balance query for the zero address\"\n        );\n\n        uint256[2] memory idPath = _idPath[tokenId];\n\n        return balances[idPath[0]][idPath[1]][tokenId][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory tokenIds\n    ) public view virtual override returns (uint256[] memory) {\n        require(\n            accounts.length == tokenIds.length,\n            \"ERC1155: accounts and mainCollectionIds and tokenIds length mismatch\"\n        );\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], tokenIds[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev Returns the total quantity for a token ID\n     * @param _id uint256 ID of the token to query\n     * @return amount of token in existence\n     */\n    function totalSupply(uint256 _id) public view returns (uint256) {\n        return _supply[_id];\n    }\n\n    /**\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\n     */\n    function isApprovedForAll(address _owner, address _operator)\n        public\n        view\n        override\n        returns (bool isOperator)\n    {\n        // Whitelist OpenSea proxy contracts for easy trading.\n        if (_isProxyForUser(_owner, _operator)) {\n            return true;\n        }\n\n        return super.isApprovedForAll(_owner, _operator);\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override whenNotPaused onlyApproved(from) {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        // _beforeTokenTransfer(\n        //     operator,\n        //     from,\n        //     to,\n        //     asSingletonArray(tokenId),\n        //     asSingletonArray(amount),\n        //     data\n        // );\n\n        uint256[2] memory idPath = _idPath[tokenId];\n        uint256 fromBalance = balances[idPath[0]][idPath[1]][tokenId][from];\n\n        require(\n            fromBalance >= amount,\n            \"ERC1155: insufficient balance for transfer\"\n        );\n        balances[idPath[0]][idPath[1]][tokenId][from] = fromBalance - amount;\n        balances[idPath[0]][idPath[1]][tokenId][from] += amount;\n\n        emit TransferSingle(operator, from, to, tokenId, amount);\n\n        doSafeTransferAcceptanceCheck(\n            operator,\n            from,\n            to,\n            tokenId,\n            amount,\n            data\n        );\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory tokenIds,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override whenNotPaused onlyApproved(from) {\n        require(\n            tokenIds.length == amounts.length,\n            \"ERC1155: IDS_AMOUNTS_LENGTH_MISMATCH\"\n        );\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, tokenIds, amounts, data);\n\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            uint256 amount = amounts[i];\n\n            uint256[2] memory idPath = _idPath[tokenId];\n            uint256 fromBalance = balances[idPath[0]][idPath[1]][tokenId][from];\n\n            require(\n                fromBalance >= amount,\n                \"ERC1155: insufficient balance for transfer\"\n            );\n\n            balances[idPath[0]][idPath[1]][tokenId][from] =\n                fromBalance -\n                amount;\n            balances[idPath[0]][idPath[1]][tokenId][from] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, tokenIds, amounts);\n\n        doSafeBatchTransferAcceptanceCheck(\n            operator,\n            from,\n            to,\n            tokenIds,\n            amounts,\n            data\n        );\n    }\n\n    /**\n     * @dev Hook to be called right before minting\n     * @param _id          Token ID to mint\n     * @param _quantity    Amount of tokens to mint\n     */\n    function _beforeMint(uint256 _id, uint256 _quantity) internal virtual {}\n\n    /**\n     * @dev Mints some amount of tokens to an address\n     * @param _to                 Address of the future owner of the token\n     * @param _tokenId                 Token ID to mint\n     * @param _quantity           Amount of tokens to mint\n     * @param _data               Data to pass if receiver is contract\n     */\n    function mint(\n        address _to,\n        uint256 _tokenId,\n        uint256 _quantity,\n        bytes memory _data\n    ) public virtual onlyOwnerOrProxy {\n        (\n            uint256 _mainCollectionId,\n            uint256 _subCollectionId,\n            bytes memory _uri\n        ) = parseData2PathUri(_data);\n\n        _mint(\n            _to,\n            _mainCollectionId,\n            _subCollectionId,\n            _tokenId,\n            _quantity,\n            _uri\n        );\n    }\n\n    /**\n     * @dev Mint tokens for each id in _ids\n     * @param _to          The address to mint tokens to\n     * @param _tokenIds         Array of ids to mint\n     * @param _quantities  Array of amounts of tokens to mint per id\n     * @param _data        Data to pass if receiver is contract\n     */\n    function batchMint(\n        address _to,\n        uint256[] memory _tokenIds,\n        uint256[] memory _quantities,\n        bytes memory _data\n    ) public virtual onlyOwnerOrProxy {\n        (\n            uint256[] memory _mainCollectionIdLs,\n            uint256[] memory _subCollectionIdLs,\n            bytes[] memory _dataLs\n        ) = parseData2DataLs(_data);\n        require(\n            _mainCollectionIdLs.length == _subCollectionIdLs.length &&\n                _subCollectionIdLs.length == _dataLs.length &&\n                _subCollectionIdLs.length == _quantities.length,\n            \"Wrong array length\"\n        );\n\n        _batchMint(\n            _to,\n            _mainCollectionIdLs,\n            _subCollectionIdLs,\n            _tokenIds,\n            _quantities,\n            _dataLs\n        );\n    }\n\n    /**\n     * @dev Burns amount of a given token id\n     * @param _from          The address to burn tokens from\n     * @param _tokenId          Token ID to burn\n     * @param _quantity    Amount to burn\n     */\n    function burn(\n        address _from,\n        uint256 _tokenId,\n        uint256 _quantity\n    ) public virtual onlyApproved(_from) {\n        _burn(_from, _tokenId, _quantity);\n    }\n\n    /**\n     * @dev Burns tokens for each id in _ids\n     * @param _from          The address to burn tokens from\n     * @param _tokenIds         Array of token ids to burn\n     * @param _quantities  Array of the amount to be burned\n     */\n    function batchBurn(\n        address _from,\n        uint256[] memory _tokenIds,\n        uint256[] memory _quantities\n    ) public virtual onlyApproved(_from) {\n        _burnBatch(_from, _tokenIds, _quantities);\n    }\n\n    /**\n     * @dev Returns whether the specified token is minted\n     * @param _id uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function exists(uint256 _id) public view returns (bool) {\n        return _supply[_id] > 0;\n    }\n\n    // Overrides ERC1155 _mint to allow changing birth events to creator transfers,\n    // and to set _supply\n    function _mint(\n        address _to,\n        uint256 _mainCollectionId,\n        uint256 _subCollectionId,\n        uint256 _id,\n        uint256 _amount,\n        bytes memory _data\n    ) internal virtual whenNotPaused {\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(\n            operator,\n            address(0),\n            _to,\n            asSingletonArray(_id),\n            asSingletonArray(_amount),\n            _data\n        );\n\n        _beforeMint(_id, _amount);\n\n        address origin = _origin(_id);\n        require(\n            _origin(_mainCollectionId) == origin &&\n                _origin(_subCollectionId) == origin,\n            \"Wrong path\"\n        );\n\n        // Add _amount\n        balances[_mainCollectionId][_subCollectionId][_id][_to] += _amount;\n        _supply[_id] += _amount;\n\n        // Origin of token will be the _from parameter\n\n        // Emit event\n        emit TransferSingle(operator, origin, _to, _id, _amount);\n\n        // Calling onReceive method if recipient is contract\n        doSafeTransferAcceptanceCheck(\n            operator,\n            origin,\n            _to,\n            _id,\n            _amount,\n            _data\n        );\n    }\n\n    // Overrides ERC1155MintBurn to change the batch birth events to creator transfers, and to set _supply\n    function _batchMint(\n        address _to,\n        uint256[] memory _mainCollectionIdLs,\n        uint256[] memory _subCollectionIdLs,\n        uint256[] memory _tokenIds,\n        uint256[] memory _amounts,\n        bytes[] memory _dataLs\n    ) internal virtual whenNotPaused {\n        _dataLs;\n\n        // Origin of tokens will be the _from parameter\n        address origin = _origin(_tokenIds[0]);\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(\n            operator,\n            address(0),\n            _to,\n            _tokenIds,\n            _amounts,\n            bytes(\"\")\n        );\n\n        // Executing all minting\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            uint256 _mainCollectionId = _mainCollectionIdLs[i];\n            uint256 _subCollectionId = _subCollectionIdLs[i];\n            uint256 _tokenId = _tokenIds[i];\n            uint256 amount = _amounts[i];\n\n            _beforeMint(_tokenId, amount);\n            require(\n                _origin(_tokenId) == origin &&\n                    _origin(_mainCollectionId) == origin &&\n                    _origin(_subCollectionId) == origin,\n                \"ERC1155Tradable#batchMint: MULTIPLE_ORIGINS_NOT_ALLOWED\"\n            );\n\n            // Update storage balance\n            balances[_mainCollectionId][_subCollectionId][_tokenId][\n                _to\n            ] += amount;\n\n            _supply[_tokenId] += amount;\n        }\n\n        // Emit batch mint event\n        emit TransferBatch(operator, origin, _to, _tokenIds, _amounts);\n\n        // Calling onReceive method if recipient is contract\n        doSafeBatchTransferAcceptanceCheck(\n            operator,\n            origin,\n            _to,\n            _tokenIds,\n            _amounts,\n            bytes(\"\")\n        );\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address account,\n        uint256 tokenId,\n        uint256 amount\n    ) internal override whenNotPaused {\n        require(account != address(0), \"ERC1155#_burn: BURN_FROM_ZERO_ADDRESS\");\n        require(amount > 0, \"ERC1155#_burn: AMOUNT_LESS_THAN_ONE\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(\n            operator,\n            account,\n            address(0),\n            asSingletonArray(tokenId),\n            asSingletonArray(amount),\n            \"\"\n        );\n\n        uint256[2] memory idPath = _idPath[tokenId];\n        uint256 accountBalance = balances[idPath[0]][idPath[1]][tokenId][\n            account\n        ];\n\n        require(\n            accountBalance >= amount,\n            \"ERC1155#_burn: AMOUNT_EXCEEDS_BALANCE\"\n        );\n\n        balances[idPath[0]][idPath[1]][tokenId][account] =\n            accountBalance -\n            amount;\n        _supply[tokenId] -= amount;\n\n        emit TransferSingle(operator, account, address(0), tokenId, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address account,\n        uint256[] memory tokenIds,\n        uint256[] memory amounts\n    ) internal override whenNotPaused {\n        require(account != address(0), \"ERC1155: BURN_FROM_ZERO_ADDRESS\");\n        require(\n            tokenIds.length == amounts.length,\n            \"ERC1155: IDS_AMOUNTS_LENGTH_MISMATCH\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(\n            operator,\n            account,\n            address(0),\n            tokenIds,\n            amounts,\n            \"\"\n        );\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            uint256 amount = amounts[i];\n\n            uint256[2] memory idPath = _idPath[tokenId];\n\n            uint256 accountBalance = balances[idPath[0]][idPath[1]][tokenId][\n                account\n            ];\n            require(\n                accountBalance >= amount,\n                \"ERC1155#_burnBatch: AMOUNT_EXCEEDS_BALANCE\"\n            );\n            balances[idPath[0]][idPath[1]][tokenId][account] =\n                accountBalance -\n                amount;\n            _supply[tokenId] -= amount;\n        }\n\n        emit TransferBatch(operator, account, address(0), tokenIds, amounts);\n    }\n\n    // Override this to change birth events' _from address\n    function _origin(\n        uint256 /* _id */\n    ) internal view virtual returns (address) {\n        return address(0);\n    }\n\n    // PROXY HELPER METHODS\n\n    function _isProxyForUser(address _user, address _address)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        if (!proxyRegistryAddress.isContract()) {\n            return false;\n        }\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n        return address(proxyRegistry.proxies(_user)) == _address;\n    }\n\n    // Copied from OpenZeppelin\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/c3ae4790c71b7f53cc8fff743536dcb7031fed74/contracts/token/ERC1155/ERC1155.sol#L394\n    function doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try\n                IERC1155Receiver(to).onERC1155Received(\n                    operator,\n                    from,\n                    id,\n                    amount,\n                    data\n                )\n            returns (bytes4 response) {\n                if (\n                    response != IERC1155Receiver(to).onERC1155Received.selector\n                ) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    // Copied from OpenZeppelin\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/c3ae4790c71b7f53cc8fff743536dcb7031fed74/contracts/token/ERC1155/ERC1155.sol#L417\n    function doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal {\n        if (to.isContract()) {\n            try\n                IERC1155Receiver(to).onERC1155BatchReceived(\n                    operator,\n                    from,\n                    ids,\n                    amounts,\n                    data\n                )\n            returns (bytes4 response) {\n                if (\n                    response !=\n                    IERC1155Receiver(to).onERC1155BatchReceived.selector\n                ) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    // Copied from OpenZeppelin\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/c3ae4790c71b7f53cc8fff743536dcb7031fed74/contracts/token/ERC1155/ERC1155.sol#L440\n    function asSingletonArray(uint256 element)\n        private\n        pure\n        returns (uint256[] memory)\n    {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.\n     */\n    function _msgSender() internal view override returns (address sender) {\n        return ContextMixin.msgSender();\n    }\n\n    function parseData2PathUri(bytes memory data)\n        public\n        pure\n        returns (\n            uint256 mainCollectionId,\n            uint256 subCollectionId,\n            bytes memory uri\n        )\n    {\n        (mainCollectionId, subCollectionId, uri) = abi.decode(\n            data,\n            (uint256, uint256, bytes)\n        );\n    }\n\n    function parseData2DataLs(bytes memory data)\n        public\n        pure\n        returns (\n            uint256[] memory mainCollectionIdLs,\n            uint256[] memory subCollectionIdLs,\n            bytes[] memory dataLs\n        )\n    {\n        (mainCollectionIdLs, subCollectionIdLs, dataLs) = abi.decode(\n            data,\n            (uint256[], uint256[], bytes[])\n        );\n    }\n}\n"
        },
        "contracts/common/meta-transactions/ContentMixin.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nabstract contract ContextMixin {\n    function msgSender() internal view returns (address payable sender) {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = payable(msg.sender);\n        }\n        return sender;\n    }\n}"
        },
        "contracts/common/meta-transactions/NativeMetaTransaction.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport { EIP712Base } from \"./EIP712Base.sol\";\n\ncontract NativeMetaTransaction is EIP712Base {\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\n        keccak256(\n            bytes(\n                \"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"\n            )\n        );\n    event MetaTransactionExecuted(\n        address userAddress,\n        address payable relayerAddress,\n        bytes functionSignature\n    );\n    mapping(address => uint256) nonces;\n\n    /*\n     * Meta transaction structure.\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\n     * He should call the desired function directly in that case.\n     */\n    struct MetaTransaction {\n        uint256 nonce;\n        address from;\n        bytes functionSignature;\n    }\n\n    function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) external payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] += 1;\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }\n\n    function hashMetaTransaction(MetaTransaction memory metaTx)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encode(\n                    META_TRANSACTION_TYPEHASH,\n                    metaTx.nonce,\n                    metaTx.from,\n                    keccak256(metaTx.functionSignature)\n                )\n            );\n    }\n\n    function getNonce(address user) public view returns (uint256 nonce) {\n        nonce = nonces[user];\n    }\n\n    function verify(\n        address signer,\n        MetaTransaction memory metaTx,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) internal view returns (bool) {\n        require(signer != address(0), \"NativeMetaTransaction: INVALID_SIGNER\");\n        return\n            signer ==\n            ecrecover(\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\n                sigV,\n                sigR,\n                sigS\n            );\n    }\n}"
        },
        "@openzeppelin/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/security/Pausable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
        },
        "contracts/common/meta-transactions/EIP712Base.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport { Initializable } from \"./Initializable.sol\";\n\ncontract EIP712Base is Initializable {\n    struct EIP712Domain {\n        string name;\n        string version;\n        address verifyingContract;\n        bytes32 salt;\n    }\n\n    string public constant ERC712_VERSION = \"1\";\n\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\n        keccak256(\n            bytes(\n                \"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"\n            )\n        );\n    bytes32 internal domainSeperator;\n\n    // supposed to be called once while initializing.\n    // one of the contracts that inherits this contract follows proxy pattern\n    // so it is not possible to do this in a constructor\n    function _initializeEIP712(string memory name) internal initializer {\n        _setDomainSeperator(name);\n    }\n\n    function _setDomainSeperator(string memory name) internal {\n        domainSeperator = keccak256(\n            abi.encode(\n                EIP712_DOMAIN_TYPEHASH,\n                keccak256(bytes(name)),\n                keccak256(bytes(ERC712_VERSION)),\n                address(this),\n                bytes32(getChainId())\n            )\n        );\n    }\n\n    function getDomainSeperator() public view returns (bytes32) {\n        return domainSeperator;\n    }\n\n    function getChainId() public view returns (uint256) {\n        uint256 id;\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    /**\n     * Accept message hash and returns hash message in EIP712 compatible form\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\n     * https://eips.ethereum.org/EIPS/eip-712\n     * \"\\\\x19\" makes the encoding deterministic\n     * \"\\\\x01\" is the version byte to make it compatible to EIP-191\n     */\n    function toTypedMessageHash(bytes32 messageHash)\n        internal\n        view\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked(\"\\x19\\x01\", getDomainSeperator(), messageHash)\n            );\n    }\n}"
        },
        "contracts/common/meta-transactions/Initializable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ncontract Initializable {\n    bool inited = false;\n\n    modifier initializer() {\n        require(!inited, \"already inited\");\n        _;\n        inited = true;\n    }\n}"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
        },
        "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "contracts/AssetContractShared.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./AssetContract.sol\";\nimport \"./TokenIdentifiers.sol\";\n\n/**\n * @title AssetContractShared\n * OpenSea shared asset contract - A contract for easily creating custom assets on OpenSea\n */\ncontract AssetContractShared is AssetContract, ReentrancyGuard {\n    mapping(address => bool) public sharedProxyAddresses;\n\n    struct Ownership {\n        uint256 id;\n        address owner;\n    }\n\n    // creator address => access index =>  address => permission's end timestamp\n    mapping(address => mapping(uint8 => mapping(address => uint256)))\n        private accessPermission;\n\n    // creator address => access index => [price,timeSpan]\n    mapping(address => mapping(uint8 => uint256[2]))\n        private accessPriceDuration;\n\n    using TokenIdentifiers for uint256;\n\n    event CreatorChanged(uint256 indexed _id, address indexed _creator);\n\n    event AccessPermissionBought(\n        address indexed buyer,\n        address indexed creator,\n        uint8 accessTypeIndex,\n        uint256 endTimeStamp\n    );\n    event AccessPriceDuationUpdate(\n        address indexed creator,\n        uint8 accessTypeIndex,\n        uint256 price,\n        uint256 timeSpan\n    );\n\n    mapping(uint256 => address) internal _creatorOverride;\n\n    /**\n     * @dev Require msg.sender to be the creator of the token id\n     */\n    modifier creatorOnly(uint256 _id) {\n        require(\n            _isCreatorOrProxy(_id, _msgSender()),\n            \"AssetContractShared#creatorOnly: ONLY_CREATOR_ALLOWED\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Require the caller to own the full supply of the token\n     */\n    modifier onlyFullTokenOwner(uint256 _id) {\n        require(\n            _ownsTokenAmount(_msgSender(), _id, _id.tokenMaxSupply()),\n            \"AssetContractShared#onlyFullTokenOwner: ONLY_FULL_TOKEN_OWNER_ALLOWED\"\n        );\n        _;\n    }\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _proxyRegistryAddress,\n        string memory _templateURI\n    ) AssetContract(_name, _symbol, _proxyRegistryAddress, _templateURI) {}\n\n    /**\n     * @dev Allows owner to change the proxy registry\n     */\n    function setProxyRegistryAddress(address _address) public onlyOwnerOrProxy {\n        proxyRegistryAddress = _address;\n    }\n\n    /**\n     * @dev Allows owner to add a shared proxy address\n     */\n    function addSharedProxyAddress(address _address) public onlyOwnerOrProxy {\n        sharedProxyAddresses[_address] = true;\n    }\n\n    /**\n     * @dev Allows owner to remove a shared proxy address\n     */\n    function removeSharedProxyAddress(address _address)\n        public\n        onlyOwnerOrProxy\n    {\n        delete sharedProxyAddresses[_address];\n    }\n\n    function mint(\n        address _to,\n        uint256 _tokenId,\n        uint256 _quantity,\n        bytes memory _data\n    ) public override nonReentrant creatorOnly(_tokenId) {\n        _mint(_to, _tokenId, _quantity, _data);\n    }\n\n    function batchMint(\n        address _to,\n        uint256[] memory _tokenIds,\n        uint256[] memory _quantities,\n        bytes memory _data\n    ) public override nonReentrant {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            require(\n                _isCreatorOrProxy(_tokenIds[i], _msgSender()),\n                \"AssetContractShared#_batchMint: ONLY_CREATOR_ALLOWED\"\n            );\n        }\n\n        (\n            uint256[] memory _mainCollectionIdLs,\n            uint256[] memory _subCollectionIdLs,\n            bytes[] memory _dataLs\n        ) = parseData2DataLs(_data);\n        require(\n            _mainCollectionIdLs.length == _subCollectionIdLs.length &&\n                _subCollectionIdLs.length == _dataLs.length &&\n                _subCollectionIdLs.length == _quantities.length,\n            \"Wrong array length\"\n        );\n\n        _batchMint(\n            _to,\n            _mainCollectionIdLs,\n            _subCollectionIdLs,\n            _tokenIds,\n            _quantities,\n            _dataLs\n        );\n    }\n\n    /////////////////////////////////\n    // CONVENIENCE CREATOR METHODS //\n    /////////////////////////////////\n\n    /**\n     * @dev Will update the URI for the token\n     * @param _id The token ID to update. msg.sender must be its creator, the uri must be impermanent,\n     *            and the creator must own all of the token supply\n     * @param _uri New URI for the token.\n     */\n    function setURI(uint256 _id, string memory _uri)\n        public\n        override\n        creatorOnly(_id)\n        onlyImpermanentURI(_id)\n        onlyFullTokenOwner(_id)\n    {\n        _setURI(_id, _uri);\n    }\n\n    /**\n     * @dev setURI, but permanent\n     */\n    function setPermanentURI(uint256 _id, string memory _uri)\n        public\n        override\n        creatorOnly(_id)\n        onlyImpermanentURI(_id)\n        onlyFullTokenOwner(_id)\n    {\n        _setPermanentURI(_id, _uri);\n    }\n\n    /**\n     * @dev Change the creator address for given token\n     * @param _to   Address of the new creator\n     * @param _id  Token IDs to change creator of\n     */\n    function setCreator(uint256 _id, address _to) public creatorOnly(_id) {\n        require(\n            _to != address(0),\n            \"AssetContractShared#setCreator: INVALID_ADDRESS.\"\n        );\n        _creatorOverride[_id] = _to;\n        emit CreatorChanged(_id, _to);\n    }\n\n    /**\n     * @dev Get the creator for a token\n     * @param _id   The token id to look up\n     */\n    function creator(uint256 _id) public view returns (address) {\n        if (_creatorOverride[_id] != address(0)) {\n            return _creatorOverride[_id];\n        } else {\n            return _id.tokenCreator();\n        }\n    }\n\n    /**\n     * @dev Get the maximum supply for a token\n     * @param _id   The token id to look up\n     */\n    function maxSupply(uint256 _id) public pure returns (uint256) {\n        return _id.tokenMaxSupply();\n    }\n\n    // Override ERC1155Tradable for birth events\n    function _origin(uint256 _id) internal pure override returns (address) {\n        return _id.tokenCreator();\n    }\n\n    function _requireMintable(address _address, uint256 _id) internal view {\n        require(\n            _isCreatorOrProxy(_id, _address),\n            \"AssetContractShared#_requireMintable: ONLY_CREATOR_ALLOWED\"\n        );\n    }\n\n    function _remainingSupply(uint256 _id)\n        internal\n        view\n        override\n        returns (uint256)\n    {\n        return maxSupply(_id) - totalSupply(_id);\n    }\n\n    function _isCreatorOrProxy(uint256 _id, address _address)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        address creator_ = creator(_id);\n        return creator_ == _address || _isProxyForUser(creator_, _address);\n    }\n\n    // Overrides ERC1155Tradable to allow a shared proxy address\n    function _isProxyForUser(address _user, address _address)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        if (sharedProxyAddresses[_address]) {\n            return true;\n        }\n        return super._isProxyForUser(_user, _address);\n    }\n\n    function setAccessPriceDuration(\n        address creator_,\n        uint8 accessIndex,\n        uint256 price,\n        uint256 timeSpan\n    ) public {\n        require(\n            creator_ == msgSender() || _isProxyForUser(creator_, msgSender()),\n            \"Only the creator or proxy can set access price \"\n        );\n\n        accessPriceDuration[creator_][accessIndex] = [price, timeSpan];\n\n        emit AccessPriceDuationUpdate(creator_, accessIndex, price, timeSpan);\n    }\n\n    function payForAccess(address creator_, uint8 accessIndex) public payable {\n        uint256 price = accessPriceDuration[creator_][accessIndex][0];\n        require(msg.value >= price, \"Insufficient fund\");\n\n        uint256 permissionEndTimeStamp = accessPriceDuration[creator_][\n            accessIndex\n        ][1] + block.timestamp;\n\n        accessPermission[creator_][accessIndex][\n            msg.sender\n        ] = permissionEndTimeStamp;\n\n        bool sent = payable(msg.sender).send(price - msg.value);\n        require(sent, \"Failed to send remain Ether back\");\n\n        emit AccessPermissionBought(\n            msg.sender,\n            creator_,\n            accessIndex,\n            permissionEndTimeStamp\n        );\n    }\n}\n"
        },
        "contracts/TokenIdentifiers.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/*\n  DESIGN NOTES:\n  Token ids are a concatenation of:\n * creator: hex address of the creator of the token. 160 bits\n * index: Index for this token (the regular ID), up to 2^56 - 1. 56 bits\n * supply: Supply cap for this token, up to 2^40 - 1 (1 trillion).  40 bits\n\n*/\n/**\n * @title TokenIdentifiers\n * support for authentication and metadata for token ids\n */\nlibrary TokenIdentifiers {\n    uint8 constant ADDRESS_BITS = 160;\n    uint8 constant INDEX_BITS = 56;\n    uint8 constant SUPPLY_BITS = 40;\n\n    uint256 constant SUPPLY_MASK = (uint256(1) << SUPPLY_BITS) - 1;\n    uint256 constant INDEX_MASK =\n        ((uint256(1) << INDEX_BITS) - 1) ^ SUPPLY_MASK;\n\n    function tokenMaxSupply(uint256 _id) internal pure returns (uint256) {\n        return _id & SUPPLY_MASK;\n    }\n\n    function tokenIndex(uint256 _id) internal pure returns (uint256) {\n        return _id & INDEX_MASK;\n    }\n\n    function tokenCreator(uint256 _id) internal pure returns (address) {\n        return address(uint160(_id >> (INDEX_BITS + SUPPLY_BITS)));\n    }\n}"
        },
        "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Strings.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 1000000
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata"
                ],
                "": [
                    "ast"
                ]
            }
        }
    }
}